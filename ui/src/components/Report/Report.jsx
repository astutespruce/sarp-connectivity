import React from 'react'
import PropTypes from 'prop-types'
import { Document, Font, Page, StyleSheet } from '@react-pdf/renderer'

import { extractHabitat } from 'components/Data/Habitat'

import Contact from './Contact'
import Credits from './Credits'
import MarineConnectivity from './MarineConnectivity'
import Feasibility from './Feasibility'
import Footer from './Footer'
import Header from './Header'
import IDInfo from './IDInfo'
import InvasiveSpecies from './InvasiveSpecies'
import LandscapeContext from './LandscapeContext'
import Legend from './Legend'
import Location from './Location'
import Ownership from './Ownership'
import { LocatorMap, Map } from './Map'
import FunctionalNetworkInfo from './FunctionalNetworkInfo'
import MainstemNetworkInfo from './MainstemNetworkInfo'
import Scores from './Scores'
import SpeciesHabitat from './SpeciesHabitat'
import SpeciesWatershedPresence from './SpeciesWatershedPresence'
import { Flex } from './elements'

const styles = StyleSheet.create({
  page: {
    fontFamily: 'Helvetica',
    paddingTop: '0.3in',
    paddingBottom: '0.5in',
    paddingHorizontal: '0.5in',
    fontSize: 12,
    lineHeight: 1.4,
    color: '#333',
  },
})

// disable hyphenation
Font.registerHyphenationCallback((word) => [word])

const Report = ({
  barrierType,
  networkType,
  data,
  name,
  map,
  locatorMap,
  attribution,
  scale,
  visibleLayers,
}) => {
  const {
    county,
    state,
    hasnetwork,
    feasibilityclass,
    flowstoocean,
    milestooutlet,
    removed,
    invasive,
    invasivenetwork,
    totalmainstemupstreammiles = 0,
  } = data

  const habitat = hasnetwork ? extractHabitat(data) : []

  return (
    <Document
      author="generated by the National Aquatic Barrier Inventory & Prioritization Tool"
      creator="National Aquatic Barrier Inventory & Prioritization Tool"
      title={`Barrier Report for ${name}, ${county} County, ${state}`}
      keywords="aquatic barriers, hydrology, dams"
      language="en-us"
    >
      <Page style={styles.page} size="LETTER">
        <Header barrierType={barrierType} {...data} name={name} />

        <Map map={map} attribution={attribution} scale={scale} />

        <Flex>
          <LocatorMap map={locatorMap} />
          <Legend
            networkType={networkType}
            name={name}
            visibleLayers={visibleLayers}
          />
        </Flex>

        <Footer />
      </Page>

      <Page style={styles.page} size="LETTER">
        <Location
          style={{ marginTop: 24 }}
          barrierType={barrierType}
          {...data}
        />

        <Ownership
          style={{ marginTop: 24 }}
          barrierType={barrierType}
          {...data}
        />

        <LandscapeContext
          style={{ marginTop: 24 }}
          barrierType={barrierType}
          {...data}
        />
      </Page>

      <Page style={styles.page} size="LETTER">
        <FunctionalNetworkInfo
          style={{ marginTop: 24 }}
          barrierType={barrierType}
          networkType={networkType}
          {...data}
        />

        {hasnetwork ? (
          <Scores
            style={{ marginTop: 24 }}
            barrierType={barrierType}
            networkType={networkType}
            {...data}
          />
        ) : null}

        {!removed &&
        feasibilityclass !== null &&
        feasibilityclass > 0 &&
        feasibilityclass <= 10 ? (
          <Feasibility style={{ marginTop: 48 }} {...data} />
        ) : null}

        {hasnetwork && habitat.length > 0 ? (
          <SpeciesHabitat
            style={{ marginTop: 32 }}
            barrierType={barrierType}
            {...data}
            habitat={habitat}
          />
        ) : null}

        {hasnetwork && flowstoocean && milestooutlet < 500 ? (
          <MarineConnectivity
            style={{ marginTop: 32 }}
            barrierType={barrierType}
            {...data}
          />
        ) : null}

        {hasnetwork && totalmainstemupstreammiles > 0 ? (
          <MainstemNetworkInfo
            style={{ marginTop: 32 }}
            barrierType={barrierType}
            networkType={networkType}
            {...data}
          />
        ) : null}

        <SpeciesWatershedPresence
          barrierType={barrierType}
          style={{ marginTop: 32 }}
          {...data}
        />

        {hasnetwork && (invasive || invasivenetwork === 1) ? (
          <InvasiveSpecies
            style={{ marginTop: 32 }}
            barrierType={barrierType}
            {...data}
          />
        ) : null}

        <IDInfo style={{ marginTop: 32 }} barrierType={barrierType} {...data} />

        <Contact
          style={{ marginTop: 24 }}
          barrierType={barrierType}
          {...data}
        />

        <Credits style={{ marginTop: 24 }} />

        <Footer />
      </Page>
    </Document>
  )
}

Report.propTypes = {
  barrierType: PropTypes.string.isRequired,
  networkType: PropTypes.string.isRequired,
  data: PropTypes.object.isRequired,
  name: PropTypes.string.isRequired,
  map: PropTypes.string.isRequired,
  locatorMap: PropTypes.string.isRequired,
  attribution: PropTypes.string.isRequired,
  scale: PropTypes.shape({
    width: PropTypes.number.isRequired,
    label: PropTypes.string.isRequired,
  }).isRequired,
  visibleLayers: PropTypes.object,
}

Report.defaultProps = {
  visibleLayers: null,
}

export default Report
